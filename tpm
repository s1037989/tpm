#!/usr/bin/env bash

VERSION=0.01

shopt -s nullglob

function expandlist () {
  local files=()
  for i in "$@"; do test -f "$i" && files+=("$i"); done
  [ ${#files[@]} -gt 0 ] && paste -s -d ' ' "${files[@]}"
}

function clean_path () {
  local var="${1:-PATH}"
  echo "$2${!var:+:${!var}}" | VAR=$var perl -nE 'chomp; my %seen; printf "export %s=%s\n", $ENV{VAR}, join(":", grep { $_ && !$seen{$_}++ } split/:/)'
}

# function which {
#   [ -z "$1" ] && { echo "Usage: $FUNCNAME cmd [ENVVAR]" >&2; return 1; }
#   perl -Mojo -E '$_=c(split/:/,$ENV{'${2:-WRAP_PATH}'})->map(sub{f($_)->list->first(sub{$_->basename eq "'$1'"})})->first(sub{$_}) and say $_->to_string or exit 1'
# }

function which () {
  local IFS=:
  for i in $WRAP_PATH; do
    test -f "$i/${1##*/}" -a -x "$i/${1##*/}" && printf "%s\n" "$i/${1##*/}" && break
  done
}

function version_compare () {
  [ -z "$1" -o -z "$2" ] && { echo "Usage: $FUNCNAME v1 v2 [r1 r2]"; return -1; }
  perl -Mversion -E '
    my ($v1, $v2, $r1, $r2) = ((map { version->parse($_) or die "unknown version $_" } @ARGV[0..1]), (@ARGV[2..3]));
    exit (($v1 > $v2) || ($v1 == $v2 && $r1 && $r2 && $r1 > $r2) ? 0 : 1);
  '
}

function packages () {
  local root="$1"
  find $root -name "enable*" | env ROOT=$root perl -nE 'm!^$ENV{ROOT}/([^/]+)/enable(\.(\w+))?$! and say join ":", grep { $_ } $1, $3'
}

unset homedir root
while getopts "H:h:r:" o; do
  case "$o" in
    H) [ "$OPTARG" == / ] || HOME=$OPTARG;;
    h) homedir=$OPTARG;;
    r) root=$OPTARG;;
  esac
done
shift $(($OPTIND-1))

ROOT=${ROOT:-$HOME/${0##*/}}
root=$(realpath ${root:-$ROOT})
homedir=$HOME/${homedir:-.${0##*/}}

test -d $root || mkdir -p $root
firstarg="$1"; shift
case "$firstarg" in
  build)
    tmpdir="${TPM_TMP:-$(mktemp -d -p $homedir -t tpm.XXXXXXXX)}"
    builddir="$tmpdir/build"
    args=("$@")
    unset OPTARG OPTIND a b m n O q r s v X
    declare -a q
    while getopts "a:b:e:m:n:o:q:r:s:v:X:" o; do
      case "$o" in
        a) a="$OPTARG";;
        b) b=$(realpath "$OPTARG");;
        e) echo "$OPTARG" >> "$builddir/.tpm-enable";;
        m) m="$OPTARG";;
        n) n="$OPTARG";;
        o) O="$OPTARG";;
        q) echo "$OPTARG" >> "$builddir/.tpm-requires"; q+=("$OPTARG");;
        r) r="$OPTARG";;
        s) s="$OPTARG";;
        v) v="$OPTARG";;
        X) echo "$OPTARG" >> "$builddir/.tpm-no-upgrade"
      esac
    done
    shift $(($OPTIND-1))
    : ${a:=$(uname -m)}
    printf "%s %s %s %s %s" "$n$m" "$s" "$v" "$r" "$a" > "$builddir/.tpm-version"
    tar="${O:-$tmpdir}/$n$m${s:+-$s}-$v-$r.$a.tar.gz"
    if test ! -d "$b" -a -x "$b"; then
      cd "$builddir"
      tmpdir="$tmpdir" builddir="$builddir" tar="$tar" "$b" "${args[@]}"
      cat "$b" > "$builddir/.tpm-enable"
      cd - &>/dev/null
    elif test -d ${b:-.}; then
      shopt -s dotglob
      link=l
      cp -a$link "$b${b:+/}"* "$builddir"
      shopt -u dotglob
    fi
    tar cvf $tar -C "$builddir" --transform='s,./,,;s,^,root/,;s,root/.tpm-,,' --show-transformed-names --remove-files . && printf "\nWrote %s\n" "$tar"
  ;;
  clean_path)
    clean_path "$@"
  ;;
  enable)
    tmpdir=${TPM_TMP:-$(mktemp -d -p $homedir -t tpm.XXXXXXXX)}
    bindir=$tmpdir/bin
    libdir=$tmpdir/lib
    mandir=$tmpdir/man
    mkdir -p $bindir $libdir
    tmp=$(mktemp -p $tmpdir -t enable.XXXXXXXX)
    {
      echo export TPM_DIR=$tmpdir
      [[ $PATH =~ $bindir ]] || $0 clean_path PATH $bindir
      [[ $LD_LIBRARY_PATH =~ $libdir ]] || $0 clean_path LD_LIBRARY_PATH $libdir
      [[ $MANPATH =~ $mandir ]] || $0 clean_path MANPATH $mandir
      [ $# -eq 0 ] && set -- $(expandlist {$homedir,.}/${0##*/}list)
      for i in "$@"; do
        package=${i%:*}
        [[ $i =~ : ]] && subpackage=.${i##*:} || subpackage=""
        test -f $root/$package/enable$subpackage || continue
        BINDIR=$bindir LIBDIR=$libdir MANDIR=$mandir APP=$0 PACKAGEDIR=$root/$package/root perl -Mojo -nE '
          my $app    = f($ENV{APP});
          my $bindir = f($ENV{BINDIR});
          my $libdir = f($ENV{LIBDIR});
          my $mandir = f($ENV{MANDIR});
          s/~/$ENV{PACKAGEDIR}/g;
          if (my ($k, $v) = (/^(\w+)\s*=\s*(.*?)$/)) {
            if ($k eq q(PATH)) {
              f($_)->list->each(sub{symlink $app->realpath, $bindir->child($_->basename)}) for map { f($_) } split /:/, $v;
              say "source /dev/stdin < <($ENV{APP} clean_path WRAP_PATH $v)"
            }
            elsif ($k eq q(LD_LIBRARY_PATH)) {
              f($_)->list->each(sub{symlink $ENV{APP}, "$ENV{LIBDIR}/$_"}) for split /:/, $v;
            }
            elsif ($k eq q(MANPATH)) {
              f($_)->list->each(sub{symlink $ENV{APP}, "$ENV{MANDIR}/$_"}) for split /:/, $v;
            }
            else {
              say "$ENV{APP} clean_path $k $v";
            }
          }
          else {
            say
          }
        ' $root/$package/enable$subpackage
      done
      echo rm -f $tmp
      echo "trap 'rm -rf $tmpdir' 0"
    } > $tmp
    echo $tmp
  ;;
  install)
    unset OPTARG OPTIND f
    while getopts "f" o; do
      case "$o" in
        f) f=1;;
      esac
    done
    shift $(($OPTIND-1))
    [ -e "$1" ] || { echo "Usage: $0 install [-f] tarfile [...]" >&2; exit 1; }
    for tar in "$@"; do
      set -- $(perl -E '$ARGV[0] =~ /^(\w+)(-(\w+))-(.*?)-(\d+)\.(\w+)\.tar\.gz$/ and say join " ", $1, $3, $4, $5, $6' ${tar##*/})
      current=($(<$root/$1/version))
      test -n "$f" || version_compare ${current[1]} $2 ${current[2]} $3 && continue
      printf "package %s to install is not newer than the installed package %s, use -f to force install\n" "${current[@]}" "$@"
      exit 1
    done
    unset summary
    for tar in "$@"; do
      set -- $(perl -E '$ARGV[0] =~ /^(\w+)(-(\w+))-(.*?)-(\d+)\.(\w+)\.tar\.gz$/ and say join " ", $1, $3, $4, $5, $6' ${tar##*/})
      echo mkdir -p $root/$1/root
      echo tar xvf $tar -C $root/$1/root -X $root/$1/no-upgrade && printf -v summary "%s\nInstalled %s to %s\n" "$summary" "$1{$3:+:$3} v$v r$r" "$root/$1" || printf -v summary "%s\nNot installed %s\n" "$summary" "$1{$3:+:$3} v$v r$r"
    done
    echo "$summary"
  ;;
  # $0 list [package[:subpackage] ...]
  # prints all arguments that are installed packages
  # if no arguments, prints all packages
  # returns a error (1) if any packages are not found
  list)
    list=("$@")
    [ $# -eq 0 ] && list=($(packages $root))
    err=0
    for i in "${list[@]}"; do
      p=${i%:*}
      [[ $i =~ : ]] && s=${i##*:} || s=
      e=$root/$p/enable${s:+.$s}
      test -e $e && echo $i || err=1
    done
    exit $err
  ;;
  status)
    echo "root = $root"
    echo "homedir = $homedir"
    echo "TPM_DIR = $TPM_DIR"
    echo "sessionid = ${TPM_DIR##*.}"
    echo "WRAP_PATH = $WRAP_PATH"
  ;;
  version)
    echo $VERSION
  ;;
  "")
    echo "missing command"
  ;;
  # looks for basename of called executable in WRAP_PATH and executes it, or exits -1
  # throws a log before and after execution
  *) # wrapper
    set -- "$firstarg" "$@"
    sessionid=${TPM_DIR##*.}
    callid=$(mktemp -u)
    cmd=$(which ${0##*/}) || { echo logger "$sessionid cannot find ${0##*/}"; exit -1; }
    echo logger "${sessionid:--} ${callid##*.} start $cmd" "$*"
    echo $cmd "$@"
    echo logger "${sessionid:--} ${callid##*.} stop($?) $cmd" "$*"
  ;;
esac

# function expandlist () {
#   perl -Mojo -E '
# $ENV{ROOT} ||= q(t/root);
# my %slurped;
# sub slurp {
#   map {
#     my ($p, $s) = split /:/;
#     $s = $s ? qq(.$s) : q();
#     my $f = f(sprintf(q(%s/%s/list%s), $ENV{ROOT}, $p, $s));
#     $_, slurp(grep { !$slurped{$_}++ } split /\n/, -e $f ? $f->slurp : '');
#   }
#   @_
# }
# say join q( ), slurp(map { grep { !$slurped{$_}++ } (-e $_ ? split /\n/, f($_)->slurp : $_) } @ARGV);
#   '
# }
